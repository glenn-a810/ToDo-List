{"version":3,"sources":["Components/TodoContext.js","Components/TodoCreate.js","Components/TodoHead.js","Components/TodoItem.js","Components/TodoList.js","Components/TodoTemplet.js","App.js","reportWebVitals.js","index.js"],"names":["TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","initialTodo","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoProvider","children","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","CircleButton","styled","button","props","open","css","InsertFormPositioner","div","InsertForm","form","Input","input","TodoCreate","useState","setOpen","autoFocus","placeholder","onClick","TodoheadBlock","TodoHead","undoneTask","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","Remove","TodoItemBlock","CheckCircle","Text","TodoItem","useTodoDispatch","TodoListBlock","TodoList","todos","TodoTemplateBlock","TodoTemplate","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c7debff.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer, useRef } from 'react'\r\nconst TodoStateContext = createContext()\r\nconst TodoDispatchContext = createContext()\r\nconst TodoNextIdContext = createContext()\r\n\r\nconst initialTodo = [\r\n    {\r\n        id: 1,\r\n        text: '프로젝트 생성하기',\r\n        done: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: '컴포넌트 스타일링하기',\r\n        done: true\r\n    },\r\n    {\r\n        id: 3,\r\n        text: 'Context 만들기',\r\n        done: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: '기능 구현하기',\r\n        done: false\r\n    }\r\n]\r\n\r\nfunction todoReducer(state, action) {\r\n    switch(action.type) {\r\n        case 'CREATE':\r\n            return state.concat(action.todo)\r\n        case 'TOGGLE':\r\n            return state.map(todo => todo.id === action.id ? {...todo, done: !todo.done} : todo)\r\n        case 'REMOVE':\r\n            return state.filter(todo => todo.id !== action.id)\r\n        default:\r\n            throw new Error(`Unhandled action type: ${action.type}`)\r\n    }\r\n}\r\n\r\nexport function TodoProvider({children}) {\r\n    const [state, dispatch] = useReducer(todoReducer, initialTodo)\r\n    const nextId = useRef(5)\r\n    \r\n    return(\r\n        <TodoStateContext.Provider value={state}>\r\n            <TodoDispatchContext.Provider value={dispatch}>\r\n                <TodoNextIdContext.Provider value={nextId}>\r\n                    {children}\r\n                </TodoNextIdContext.Provider>\r\n            </TodoDispatchContext.Provider>\r\n        </TodoStateContext.Provider>\r\n    )\r\n}\r\n\r\nexport function useTodoState() {\r\n    const context = useContext(TodoStateContext)\r\n    if(!context) {\r\n        throw new Error('Cannot find TodoProvider(TodoStateContext)')\r\n    }\r\n    return context\r\n}\r\n\r\nexport function useTodoDispatch() {\r\n    const context = useContext(TodoDispatchContext)\r\n    if(!context) {\r\n        throw new Error('Cannot find TodoProvider(TodoDispatchContext)')\r\n    }\r\n    return context\r\n}\r\n\r\nexport function useNextId() {\r\n    const context = useContext(TodoNextIdContext)\r\n    if(!context) {\r\n        throw new Error('Cannot find TodoProvider(TodoNextIdContext)')\r\n    }\r\n    return context\r\n}","// 새로운 할 일을 등록할 수 있게 해주는 컴포넌트입니다. \r\n// TodoTemplate 의 하단부에 초록색 원 버튼을 렌더링해주고, \r\n// 이를 클릭하면 할 일을 입력 할 수 있는 폼이 나타납니다. \r\n// 버튼을 다시 누르면 폼이 사라집니다.\r\nimport React, { useState } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { MdAdd } from 'react-icons/md'\r\n\r\nconst CircleButton = styled.button`\r\n    background: #38d9a9;\r\n    &:hover {\r\n        background: #63e6be;\r\n    }\r\n    &:active {\r\n        background: #20c997;\r\n    }\r\n\r\n    z-index: 5;\r\n    cursor: pointer;\r\n    width: 80px;\r\n    height: 80px;\r\n    display: block;\r\n    align-items: center;\r\n    font-size: 60px;\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 0px;\r\n    transform: translate(-50%, 50%);\r\n    color: white;\r\n    border-radius: 50%;\r\n    border: none;\r\n    outline: none;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    transition: 0.125s, all ease-in;\r\n    ${props => props.open && css`\r\n        background: #ff6b6b;\r\n        &:hover {\r\n            background: #ff8787;\r\n        }\r\n        &:active {\r\n            background: #fa5252;\r\n        }\r\n        transform: translate(-50%, 50%) rotate(45deg);\r\n    `}\r\n`\r\n\r\nconst InsertFormPositioner = styled.div`\r\n    width: 100%;\r\n    bottom: 0;\r\n    left: 0;\r\n    position: absolute;\r\n`\r\n\r\nconst InsertForm = styled.form`\r\n    background: #f8f9fa;\r\n    padding-left: 32px;\r\n    padding-top: 32px;\r\n    padding-right: 32px;\r\n    padding-bottom: 72px;\r\n\r\n    border-bottom-left-radius: 16px;\r\n    border-bottom-right-radius: 16px;\r\n    border-top: 1px solid #e9ecef;\r\n`\r\n\r\nconst Input = styled.input`\r\n    padding: 12px;\r\n    border-radius: 4px;\r\n    border: 1px solid #dee2e6;\r\n    width: 100%;\r\n    outline: none;\r\n    font-family: sans-serif;\r\n    font-weight: 300;\r\n    font-size: 16px;\r\n    box-sizing: border-box;\r\n`\r\n\r\nfunction TodoCreate() {\r\n    const [open, setOpen] = useState(false)\r\n    const onToggle = () => setOpen(!false)\r\n\r\n    return(\r\n        <>\r\n            {open && (\r\n                <InsertFormPositioner>\r\n                    <InsertForm>\r\n                        <Input autoFocus placeholder='할 일을 입력 후 ENTER를 누르세요' />\r\n                    </InsertForm>\r\n                </InsertFormPositioner>\r\n            )}\r\n            <CircleButton onClick={onToggle} open={open}>\r\n                <MdAdd />\r\n            </CircleButton>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoCreate","// 이 컴포넌트는 오늘의 날짜와 요일을 보여주고, 앞으로 해야 할 일이 몇개 남았는지 보여줍니다.\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTodoState } from './TodoContext'\r\n\r\nconst TodoheadBlock = styled.div`\r\n    padding-top: 48px;\r\n    padding-left: 32px;\r\n    padding-right: 32px;\r\n    padding-bottom: 24px;\r\n    border-bottom: 1px solid #e9ecef;\r\n    font-family: sans-serif;\r\n\r\n    h1 {\r\n        margin: 0;\r\n        font-weight: 700;\r\n        font-size: 32px;\r\n        color: #343a40;\r\n    }\r\n\r\n    .day {\r\n        margin-top: 4px;\r\n        color: #868e96;\r\n        font-weight: 700;\r\n        font-size: 20px;\r\n    }\r\n\r\n    .task-left {\r\n        color: #20c997;\r\n        font-size: 18px;\r\n        margin-top: 40px;\r\n        font-weight: 700;\r\n    }\r\n`\r\n\r\nfunction TodoHead() {\r\n    const todos = useTodoState()\r\n    const undoneTask = todos.filter(todo => !todo.done)\r\n\r\n    const today = new Date()\r\n    const dateString = today.toLocaleDateString('ko-KR', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric'\r\n    })\r\n    const dayName = today.toLocaleDateString('ko-KR', { weekday: 'long' })\r\n\r\n    return(\r\n        <TodoheadBlock>\r\n            <h1>{dateString}</h1>\r\n            <div className='day'>{dayName}</div>\r\n            <div className='task-left'>할 일 {undoneTask.length}개 남음</div>\r\n        </TodoheadBlock>\r\n    )\r\n}\r\n\r\nexport default TodoHead","// 각 할 일에 대한 정보를 렌더링해주는 컴포넌트입니다. \r\n// 좌측에 있는 원을 누르면 할 일의 완료 여부를 toggle 할 수 있습니다. \r\n// 할 일이 완료됐을 땐 좌측에 체크가 나타나고 텍스트의 색상이 연해집니다. \r\n// 그리고, 마우스를 올리면 휴지통 아이콘이 나타나고 이를 누르면 항목이 삭제됩니다.\r\nimport React from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { MdDone, MdDelete } from 'react-icons/md'\r\nimport { useTodoDispatch } from './TodoContext'\r\n\r\nconst Remove = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #dee2e6;\r\n    font-size: 20px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        color: #ff6b6b;\r\n    }\r\n    display: none;\r\n`\r\n\r\nconst TodoItemBlock = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n    &:hover {\r\n        ${Remove} {\r\n            display: initial;\r\n        }\r\n    }\r\n`\r\n\r\nconst CheckCircle = styled.div`\r\n    width: 26px;\r\n    height: 26px;\r\n    border-radius: 13px;\r\n    border: 1px solid #ced4da;\r\n    font-size: 22px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-right: 16px;\r\n    cursor: pointer;\r\n    ${props => \r\n        props.done && css`\r\n            border: 1px solid #38d9a9;\r\n            color: #38d9a9;\r\n        `\r\n    }\r\n`\r\n\r\nconst Text = styled.div`\r\n    flex: 1;\r\n    font-family: sans-serif;\r\n    font-weight: 300;\r\n    font-size: 16px;\r\n    color: #495057;\r\n    ${props => \r\n        props.done && css`\r\n            color: #ced4da;\r\n        `\r\n    }\r\n`\r\n\r\nfunction TodoItem({id, done, text}) {\r\n    const dispatch = useTodoDispatch();\r\n    const handleToggle = () => dispatch({type: 'TOGGLE', id})\r\n    const handleRemove = () => dispatch({type: 'REMOVE', id})\r\n\r\n    return(\r\n        <TodoItemBlock>\r\n            <CheckCircle done={done} onClick={handleToggle}>{done && <MdDone />}</CheckCircle>\r\n            <Text done={done}>{text}</Text>\r\n            <Remove onClick={handleRemove}>\r\n                <MdDelete />\r\n            </Remove>\r\n        </TodoItemBlock>\r\n    )\r\n}\r\n\r\nexport default TodoItem","// 이 컴포넌트는 할 일에 대한 정보가 들어있는 todos 배열을 내장함수 map 을 사용하여 \r\n// 여러개의 TodoItem 컴포넌트를 렌더링해줍니다.\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTodoState } from './TodoContext'\r\nimport TodoItem from './TodoItem'\r\n\r\nconst TodoListBlock = styled.div`\r\n    flex: 1;\r\n    padding: 20px 32px;\r\n    padding-bottom: 48px;\r\n    overflow-y: auto;\r\n`\r\n\r\nfunction TodoList() {\r\n    const todos = useTodoState()\r\n\r\n    return(\r\n        <TodoListBlock>\r\n            {todos.map(todo => (\r\n                <TodoItem\r\n                    key={todo.id}\r\n                    id={todo.id}\r\n                    text={todo.text}\r\n                    done={todo.done}\r\n                />\r\n            ))}\r\n        </TodoListBlock>\r\n    )\r\n}\r\n\r\nexport default TodoList","// 이 컴포넌트는 우리가 만들 투두리스트의 레이아웃을 설정하는 컴포넌트입니다. \r\n// 페이지의 중앙에 그림자가 적용된 흰색 박스를 보여줍니다.\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n    width: 512px;\r\n    height: 718px;\r\n\r\n    position: relative;\r\n    background: white;\r\n    border-radius: 16px;\r\n    box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\r\n\r\n    margin: 0 auto;\r\n\r\n    margin-top: 96px;\r\n    margin-bottom: 32px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nfunction TodoTemplate({children}) {\r\n    return(\r\n        <TodoTemplateBlock>{children}</TodoTemplateBlock>\r\n    )\r\n}\r\n\r\nexport default TodoTemplate","import React from 'react'\nimport { createGlobalStyle } from 'styled-components'\nimport { TodoProvider } from './Components/TodoContext'\nimport TodoCreate from './Components/TodoCreate'\nimport TodoHead from './Components/TodoHead'\nimport TodoList from './Components/TodoList'\nimport TodoTemplate from './Components/TodoTemplet'\n\nconst GlobalStyle = createGlobalStyle`\n  @font-face {\n    font-family: 'Noto Sans KR', sans-serif;\n    src: url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100;300;400;500;700;900&display=swap');\n  }\n  body {\n    background: #e9ecef;\n  }\n`\n\nfunction App() {\n  return(\n    <TodoProvider>\n      <GlobalStyle />\n      <TodoTemplate>\n        <TodoHead />\n        <TodoList />\n        <TodoCreate />\n      </TodoTemplate>\n    </TodoProvider>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}